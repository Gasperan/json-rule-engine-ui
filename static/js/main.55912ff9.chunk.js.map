{"version":3,"sources":["Node.js","Leaf.js","App.js","serviceWorker.js","index.js"],"names":["Node","name","level","callback","tree","onDobleClick","position","console","log","className","onDoubleClick","onClick","Leaf","fact","operator","value","basic","all","App","useState","setTree","insertNode","nodeName","currentChilds","_","get","push","newStructure","set","insertLeaf","renderChilds","style","marginLeft","map","node","index","key","Object","keys","newName","startsWith","substring","length","json","padding","theme","gruvboxDark","copy","JSON","stringify","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"gMAsBeA,EApBF,SAAC,GAA6D,IAA3DC,EAA0D,EAA1DA,KAAMC,EAAoD,EAApDA,MAAaC,GAAuC,EAA7CC,KAA6C,EAAvCD,UAAUE,EAA6B,EAA7BA,aAAcC,EAAe,EAAfA,SAEzD,OADAC,QAAQC,IAAI,eAAgBP,GAE1B,yBAAKQ,UAAU,iBAAiBC,cAAe,kBAAML,EAAaJ,KAChE,yBAAKQ,UAAU,cAAcR,GAC7B,yBAAKQ,UAAU,uBACb,yBACEE,QAAS,kBAAMR,EAASD,EAAOD,EAAMK,IACrCG,UAAU,iBAFZ,aAMA,yBAAKE,QAAS,kBAAMN,EAAaJ,IAAOQ,UAAU,cAAlD,aCEOG,EAdF,SAAC,GAA+B,IAA7BC,EAA4B,EAA5BA,KAAMC,EAAsB,EAAtBA,SAAUC,EAAY,EAAZA,MAC9B,OACE,yBAAKN,UAAU,kBACb,6BACGI,EACD,6BACCC,EACD,6BACCC,K,+DCDHC,EAAQ,CACZC,IAAK,IAoFQC,MAjFf,WAAgB,IAAD,EACWC,mBAAS,CAACH,IADrB,mBACNZ,EADM,KACAgB,EADA,KAGPC,EAAa,SAACnB,EAAOoB,EAAUhB,GACnC,IAMMiB,EAAgBC,IAAEC,IAAIrB,EAAK,GAAIkB,GACrCC,EAAcG,KAPD,CACXb,KAAM,cACNC,SAAU,QACVC,MAAO,QAKT,IAAMY,EAAeH,IAAEI,IAAIxB,EAAK,GAAIkB,EAAUC,GAC9CH,EAAQ,CAACO,KAGLE,EAAa,SAACP,GAClB,IAGMC,EAAgBC,IAAEC,IAAIrB,EAAK,GAAIkB,GACrCC,EAAcG,KAJF,CACVT,IAAK,KAIP,IAAMU,EAAeH,IAAEI,IAAIxB,EAAK,GAAIkB,EAAUC,GAC9CH,EAAQ,CAACO,KAqCX,OACE,yBAAKlB,UAAU,iBACb,yBAAKA,UAAU,mBApCE,SAAfqB,EAAgB1B,EAAMF,GAC1B,OACE,yBAAK6B,MAAO,CAAEC,WAAY,KACvB5B,EAAK6B,KAAI,SAACC,EAAMC,GAAW,IAClBtB,EAA0BqB,EAA1BrB,KAAMC,EAAoBoB,EAApBpB,SAAUC,EAAUmB,EAAVnB,MACxB,GAAIF,EACF,OACE,kBAAC,EAAD,CAAMuB,IAAKD,EAAOtB,KAAMA,EAAMC,SAAUA,EAAUC,MAAOA,IAG3D,IAAMO,EAAWe,OAAOC,KAAKJ,GACzBK,EAAUrC,EAAQ,IAAMiC,EAAQ,KAAOb,EAAS,GAKpD,OAHIiB,EAAQC,WAAW,OACrBD,EAAUA,EAAQE,UAAU,EAAGF,EAAQG,SAGvC,6BACE,kBAAC,EAAD,CACEN,IAAKD,EACLlC,KAAMsC,EACNjC,SAAU6B,EACVhC,SAAUkB,EACVhB,aAAcwB,IAEfC,EAAaI,EAAKZ,GAAWiB,QAWNT,CAAa1B,EAAM,KACrD,yBAAKK,UAAU,wBACb,kBAAC,IAAD,CACEA,UAAU,cACVkC,KAAMvC,EAAK,GACXwC,QAAS,EACTC,MAAOC,gBAET,4BACEnC,QAAS,kBAAMoC,IAAKC,KAAKC,UAAU7C,EAAK,MACxCK,UAAU,UAFZ,WCvEYyC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACL5D,QAAQ4D,MAAMA,EAAMC,a","file":"static/js/main.55912ff9.chunk.js","sourcesContent":["import React from \"react\";\n\nconst Node = ({ name, level, tree, callback, onDobleClick, position }) => {\n  console.log(\"node-name ->\", name);\n  return (\n    <div className=\"node-container\" onDoubleClick={() => onDobleClick(name)}>\n      <div className=\"node-title\">{name}</div>\n      <div className=\"node-button-section\">\n        <div\n          onClick={() => callback(level, name, position)}\n          className=\"add-condition\"\n        >\n          condition\n        </div>\n        <div onClick={() => onDobleClick(name)} className=\"add-bin-op\">\n          bin op\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default Node;\n","import React from \"react\";\n\nconst Leaf = ({ fact, operator, value }) => {\n  return (\n    <div className=\"leaf-container\">\n      <div>\n        {fact}\n        <br />\n        {operator}\n        <br />\n        {value}\n      </div>\n    </div>\n  );\n};\n\nexport default Leaf;\n","import React, { useState } from \"react\";\nimport Node from \"./Node\";\nimport Leaf from \"./Leaf\";\nimport \"./App.css\";\nimport JSONPretty from \"react-json-prettify\";\nimport { gruvboxDark } from \"react-json-prettify/dist/themes\";\nimport _ from \"lodash\";\nimport copy from \"copy-to-clipboard\";\n\nconst basic = {\n  all: [],\n};\n\nfunction App() {\n  const [tree, setTree] = useState([basic]);\n\n  const insertNode = (level, nodeName, position) => {\n    const leaf = {\n      fact: \"tipotarjeta\",\n      operator: \"equal\",\n      value: \"CMR\",\n    };\n\n    const currentChilds = _.get(tree[0], nodeName);\n    currentChilds.push(leaf);\n    const newStructure = _.set(tree[0], nodeName, currentChilds);\n    setTree([newStructure]);\n  };\n\n  const insertLeaf = (nodeName) => {\n    const all = {\n      all: [],\n    };\n    const currentChilds = _.get(tree[0], nodeName);\n    currentChilds.push(all);\n    const newStructure = _.set(tree[0], nodeName, currentChilds);\n    setTree([newStructure]);\n  };\n\n  const renderChilds = (tree, level) => {\n    return (\n      <div style={{ marginLeft: 50 }}>\n        {tree.map((node, index) => {\n          const { fact, operator, value } = node;\n          if (fact) {\n            return (\n              <Leaf key={index} fact={fact} operator={operator} value={value} />\n            );\n          } else {\n            const nodeName = Object.keys(node);\n            let newName = level + \"[\" + index + \"].\" + nodeName[0];\n\n            if (newName.startsWith(\"[\")) {\n              newName = newName.substring(4, newName.length);\n            }\n            return (\n              <div>\n                <Node\n                  key={index}\n                  name={newName}\n                  position={index}\n                  callback={insertNode}\n                  onDobleClick={insertLeaf}\n                />\n                {renderChilds(node[nodeName], newName)}\n              </div>\n            );\n          }\n        })}\n      </div>\n    );\n  };\n\n  return (\n    <div className=\"app-container\">\n      <div className=\"rules-container\">{renderChilds(tree, \"\")}</div>\n      <div className=\"rules-json-container\">\n        <JSONPretty\n          className=\"json-pretty\"\n          json={tree[0]}\n          padding={5}\n          theme={gruvboxDark}\n        />\n        <button\n          onClick={() => copy(JSON.stringify(tree[0]))}\n          className=\"button\"\n        >\n          copy\n        </button>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}